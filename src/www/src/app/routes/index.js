// DO NOT MODIFY THIS FILE MANUALLY.
// This file is generated by `npm run route-generator`.

/* eslint-disable */
import React from 'react';
import { Route, Switch, Redirect, useHistory } from 'react-router-dom';
import loadable from '@loadable/component'
import RouteChecker from './RouteChecker';
import Sample from './Sample';

export const sample = RouteChecker(loadable(() => retryImport(() => import('./Sample'))))
export const Category = RouteChecker(loadable(() => retryImport(() => import('./Category'))))
export const ConsumerReview = RouteChecker(loadable(() => retryImport(() => import('./ConsumerReview'))))
const Error = loadable(() => retryImport(() => import('./Error')));

const caseChecker = ({ history, routeName, match, props, Compoment }) => {
  const { location: { pathname, search, hash } = {} } = history || {};
  const url = `${pathname}${search}${hash}`;
  const urlWithLowerCaseEncodedParams = url.replace(/%(..)/g, (s, g1) => `%${g1.toLowerCase()}`)
  const decodeUrl = decodeURI(urlWithLowerCaseEncodedParams);
  return !(decodeUrl.toLowerCase() === decodeUrl) ? 
    <Redirect to={urlWithLowerCaseEncodedParams.toLowerCase()} />
  :
    <Compoment
      history={history}
      routeName={routeName}
      match={match}
      {...props}
    />;
};


export default (props) => {
  const history = useHistory();
  const { location: { pathname, search, hash } = {} } = history || {};

  const regexpPathName = /[/]{2,}/i;
  if (pathname.match(regexpPathName)) {
      const pathNameFormattered = pathname.replace(regexpPathName, '/');
      const url = decodeURI(`${pathNameFormattered}${search}${hash}`);
      return <Redirect to={url} />
  }

  return (
    <Switch>
      <Route exact path={"category"} render={({ match, history }) =>  <Sample history={history} routeName="category" match={match} {...props} />} />
      <Route exact path={"/:product-id/consumer-reviews/"} render={({ match, history }) =>  caseChecker({ history, routeName : "consumer-reviews", match, props, Compoment: ConsumerReview }) } />
      <Route render={({ match, history }) => <Error history={history} match={match} {...props} />} />
    </Switch>
  )
};